/**
 * chart-debugger.js
 * Ferramenta para verificar e depurar problemas de cores em gr√°ficos
 */

const ChartDebugger = {
    /**
     * Verifica a consist√™ncia das cores nos gr√°ficos da p√°gina
     */
    verificarCores: function() {
        console.log('üîç Iniciando verifica√ß√£o de consist√™ncia de cores nos gr√°ficos...');
        
        // Encontrar todos os canvas de gr√°ficos
        const canvasElements = document.querySelectorAll('canvas');
        
        if (canvasElements.length === 0) {
            console.log('‚ö†Ô∏è Nenhum canvas encontrado na p√°gina.');
            return;
        }
        
        console.log(`üìä Encontrados ${canvasElements.length} elementos canvas na p√°gina.`);
        
        // Verificar cada canvas
        canvasElements.forEach((canvas, index) => {
            // Verificar se h√° uma inst√¢ncia do Chart.js associada
            const chartInstance = canvas._chart;
            
            if (!chartInstance) {
                console.log(`‚ö†Ô∏è Canvas #${canvas.id || index} n√£o tem um gr√°fico Chart.js associado.`);
                return;
            }
            
            console.log(`üìà Analisando gr√°fico "${canvas.id}" (tipo: ${chartInstance.config.type})`);
            
            // Verificar datasets e cores
            const datasets = chartInstance.data.datasets;
            
            if (!datasets || datasets.length === 0) {
                console.log(`‚ö†Ô∏è Gr√°fico "${canvas.id}" n√£o tem datasets.`);
                return;
            }
            
            console.log(`üìã Gr√°fico "${canvas.id}" tem ${datasets.length} datasets.`);
            
            // Verificar cores por tipo de gr√°fico
            if (['bar'].includes(chartInstance.config.type)) {
                this._verificarCoresBarras(canvas.id, chartInstance);
            } else if (['pie', 'doughnut'].includes(chartInstance.config.type)) {
                this._verificarCoresPie(canvas.id, chartInstance);
            } else {
                this._verificarCoresOutros(canvas.id, chartInstance);
            }
        });
        
        console.log('‚úÖ Verifica√ß√£o de cores conclu√≠da.');
    },
    
    /**
     * Verifica cores em gr√°ficos de barras
     * @private
     */
    _verificarCoresBarras: function(canvasId, chart) {
        const datasets = chart.data.datasets;
        
        console.log(`üîç Verificando cores em gr√°fico de barras "${canvasId}":`);
        
        // Verificar se cada dataset tem uma cor consistente
        datasets.forEach((dataset, index) => {
            console.log(`   Dataset #${index}: "${dataset.label}"`);
            
            if (Array.isArray(dataset.backgroundColor)) {
                // Se tiver um array de cores, pode haver inconsist√™ncia
                console.log(`   ‚ö†Ô∏è Dataset "${dataset.label}" tem um array de cores. Verificar se √© intencional.`);
                console.log(`   Cores: `, dataset.backgroundColor);
            } else {
                // Cor √∫nica √© o ideal para barras agrupadas
                console.log(`   ‚úÖ Dataset "${dataset.label}" tem cor √∫nica: ${dataset.backgroundColor}`);
            }
        });
    },
    
    /**
     * Verifica cores em gr√°ficos de pizza/rosca
     * @private
     */
    _verificarCoresPie: function(canvasId, chart) {
        const datasets = chart.data.datasets;
        
        console.log(`üîç Verificando cores em gr√°fico pie/doughnut "${canvasId}":`);
        
        // Em gr√°ficos de pizza, cada item deve ter sua pr√≥pria cor
        datasets.forEach((dataset, index) => {
            if (!Array.isArray(dataset.backgroundColor)) {
                console.log(`   ‚ö†Ô∏è Dataset #${index} n√£o tem um array de cores. Todas as fatias ter√£o a mesma cor.`);
            } else if (dataset.backgroundColor.length < dataset.data.length) {
                console.log(`   ‚ö†Ô∏è Dataset #${index} tem ${dataset.backgroundColor.length} cores para ${dataset.data.length} dados.`);
            } else {
                console.log(`   ‚úÖ Dataset #${index} tem cores adequadas para todos os segmentos.`);
            }
        });
    },
    
    /**
     * Verifica cores em outros tipos de gr√°ficos
     * @private
     */
    _verificarCoresOutros: function(canvasId, chart) {
        const datasets = chart.data.datasets;
        
        console.log(`üîç Verificando cores em gr√°fico "${chart.config.type}" (${canvasId}):`);
        
        // Para outros tipos de gr√°ficos (linha, √°rea, etc.)
        datasets.forEach((dataset, index) => {
            console.log(`   Dataset #${index}: "${dataset.label}"`);
            console.log(`   Cor de fundo: ${dataset.backgroundColor}`);
            console.log(`   Cor de borda: ${dataset.borderColor}`);
        });
    },
    
    /**
     * Corrige problemas comuns de cores em gr√°ficos
     */
    corrigirCores: function() {
        console.log('üîß Iniciando corre√ß√£o autom√°tica de cores...');
        
        // Encontrar todos os canvas de gr√°ficos
        const canvasElements = document.querySelectorAll('canvas');
        
        canvasElements.forEach((canvas) => {
            const chartInstance = canvas._chart;
            
            if (!chartInstance) return;
            
            const chartType = chartInstance.config.type;
            
            // Foco especial em gr√°ficos de barras (onde ocorrem mais problemas de cores)
            if (chartType === 'bar') {
                this._corrigirCoresBarras(canvas.id, chartInstance);
                chartInstance.update();
            }
        });
        
        console.log('‚úÖ Corre√ß√£o de cores conclu√≠da. Recarregue a p√°gina para ver as mudan√ßas.');
    },
    
    /**
     * Corrige cores em gr√°ficos de barras
     * @private
     */
    _corrigirCoresBarras: function(canvasId, chart) {
        const datasets = chart.data.datasets;
        const cssColors = [
            getComputedStyle(document.documentElement).getPropertyValue('--color-primary').trim(),
            getComputedStyle(document.documentElement).getPropertyValue('--color-secondary').trim(),
            getComputedStyle(document.documentElement).getPropertyValue('--color-tertiary').trim(),
            getComputedStyle(document.documentElement).getPropertyValue('--color-accent1').trim(),
            getComputedStyle(document.documentElement).getPropertyValue('--color-accent2').trim(),
            getComputedStyle(document.documentElement).getPropertyValue('--color-light-gray').trim(),
            getComputedStyle(document.documentElement).getPropertyValue('--color-success').trim(),
            getComputedStyle(document.documentElement).getPropertyValue('--color-warning').trim(),
            getComputedStyle(document.documentElement).getPropertyValue('--color-danger').trim()
        ].filter(Boolean);
        
        console.log(`üîß Aplicando corre√ß√£o em gr√°fico de barras "${canvasId}"`);
        
        // Para cada dataset, garantir cor √∫nica
        datasets.forEach((dataset, index) => {
            // Se tiver um array de cores, substituir por cor √∫nica
            if (Array.isArray(dataset.backgroundColor)) {
                const colorIndex = index % cssColors.length;
                const color = cssColors[colorIndex];
                
                console.log(`   üìù Substituindo array de cores em "${dataset.label}" por cor √∫nica: ${color}`);
                
                dataset.backgroundColor = this._hexToRgba(color, 0.7);
                dataset.borderColor = color;
            }
        });
    },
    
    /**
     * Converte cor hex para rgba
     * @private
     */
    _hexToRgba: function(hex, alpha = 1) {
        if (!hex) return 'rgba(0, 0, 0, 1)';
        
        // Remover o # se existir
        hex = hex.replace('#', '');
        
        // Expandir formato abreviado
        if (hex.length === 3) {
            hex = hex.split('').map(char => char + char).join('');
        }
        
        // Converter para valores RGB
        const r = parseInt(hex.substring(0, 2), 16);
        const g = parseInt(hex.substring(2, 4), 16);
        const b = parseInt(hex.substring(4, 6), 16);
        
        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    }
};

// Adicionar ao objeto window para acesso via console
window.ChartDebugger = ChartDebugger;

// Log para indicar que o debugger foi carregado
console.log('üõ†Ô∏è ChartDebugger carregado. Use ChartDebugger.verificarCores() ou ChartDebugger.corrigirCores() no console para an√°lise.'); 